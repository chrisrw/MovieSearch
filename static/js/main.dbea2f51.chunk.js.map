{"version":3,"sources":["core/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","useState","movies","setMovies","searchTitle","setSearchTitle","setTitleFromClick","className","type","value","onChange","e","target","style","height","onClick","axios","get","process","then","res","console","log","data","Search","catch","err","length","map","movie","id","key","src","Poster","alt","Title","Year","newMovies","splice","filterMovie","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sOAyEeA,EAtEF,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACVC,EADU,KACFC,EADE,OAEqBF,mBAAS,IAF9B,mBAEVG,EAFU,KAEGC,EAFH,OAG2BJ,mBAAS,IAHpC,mBAGMK,GAHN,aAIqBL,oBAAS,GAJ9B,gCAKaA,mBAAS,KALtB,gCAMiBA,oBAAS,IAN1B,6BAmCjB,OACE,6BACE,yBAAKM,UAAU,UACf,sCACE,2BACAC,KAAK,OACLC,MAAOL,EACPM,SAAU,SAACC,GAAD,OAAON,EAAeM,EAAEC,OAAOH,UAGzC,4BAAQI,MAAO,CAAEC,OAAQ,QAAUN,KAAK,SAASD,UAAU,kBAAkBQ,QAtB/D,WAClBT,EAAkBF,GAbXY,IACJC,IADI,yCAJGC,WAIH,cAC2Cd,IAC/Ce,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZjB,EAAUiB,EAAIG,KAAKC,WAEpBC,OAAM,SAACC,GACNL,QAAQC,IAAII,QA2BZ,eAIF,yBAAKnB,UAAU,QACZL,EAAOyB,OAAS,GACfzB,EAAO0B,KAAI,SAACC,EAAOC,GAAR,OACT,yBACEC,IAAKD,GAGL,yBAAKvB,UAAU,UAAUyB,IAAKH,EAAMI,OAAQC,IAAG,UAAKL,EAAMM,MAAX,mBAC/C,2BACGN,EAAMM,MADT,IACiBN,EAAMO,MAEvB,4BAAQ7B,UAAU,iBAAiBQ,QAAS,kBAhCpC,SAACe,GACnB,IAAMO,EAAS,YAAOnC,GACtBmC,EAAUC,OAAOR,EAAI,GACrBT,QAAQC,IAAIe,EAAWnC,EAAQ4B,GAC/B3B,EAAUkC,GA4BkDE,CAAYT,KAA9D,uBChDCU,G,MAVH,WACV,OACE,6BACE,6BACA,kBAAC,EAAD,UCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.dbea2f51.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Form = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [searchTitle, setSearchTitle] = useState('');\r\n  const [titleFromClick, setTitleFromClick] = useState('');\r\n  const [movieFilter, setMovieFilter] = useState(true);\r\n  const [message, setMessage] = useState('');\r\n  const [hideMovie, setHideMovie] = useState(false);\r\n  const KEY = process.env.REACT_APP_APIKEY;\r\n\r\n  // GET Movies based on input value.\r\n  const fetchMovies = () => {\r\n    return axios\r\n      .get(`http://www.omdbapi.com/?apikey=${KEY}&s=${searchTitle}`)\r\n      .then((res) => {\r\n        console.log(res);\r\n        setMovies(res.data.Search);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  //DELETE Movie by Id\r\n  // Make API calls on click to avoid unnecessary calls\r\n  const handleClick = () => {\r\n    setTitleFromClick(searchTitle);\r\n    fetchMovies();\r\n  };\r\n  // make a copy of movies array, splice by id\r\n  const filterMovie = (id) => {\r\n    const newMovies = [...movies]\r\n    newMovies.splice(id, 1)\r\n    console.log(newMovies, movies, id)\r\n    setMovies(newMovies)\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"Header\">\r\n      <h1>Movies</h1>\r\n        <input\r\n        type=\"text\"\r\n        value={searchTitle}\r\n        onChange={(e) => setSearchTitle(e.target.value)}\r\n      /> \r\n      \r\n        <button style={{ height: \"35px\" }} type=\"button\" className=\"btn btn-primary\" onClick={handleClick}>\r\n        Fetch Post\r\n      </button>\r\n      </div>\r\n      <div className=\"grid\">\r\n        {movies.length > 0 &&\r\n          movies.map((movie, id) => (\r\n            <div\r\n              key={id}\r\n            >\r\n              \r\n              <img className=\"imgSize\" src={movie.Poster} alt={`${movie.Title} movie poster`} />\r\n              <p>\r\n                {movie.Title} {movie.Year}\r\n              </p>\r\n              <button className=\"btn btn-danger\" onClick={() => filterMovie(id)}>\r\n                Remove Movie\r\n              </button>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n// (e) => console.log(movie)\r\nexport default Form;\r\n","import React, {useState} from 'react'\nimport Form from \"./core/Form\"\nimport './App.css';\n\n\nconst App = () => {\n  return (\n    <div>\n      <div>\n      <Form />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}